{"version":3,"sources":["wrappedDocumentLoader.js","App.js","serviceWorker.js","index.js"],"names":["jsonld","require","documentLoader","process","versions","node","window","self","documentLoaders","xhr","module","exports","args","url","a","console","log","queryString","Ed25519KeyPair","jsigs","vc","Ed25519Signature2018","suites","keyToDidDoc","driver","wrappedDocumentLoader","defaultImage","parsed","parse","location","search","App","state","issuerVerificationMethod","toDID","publicKeyBase58","privateKeyBase58","msg","backgroundImage","makeCard","canvas","canvasA","context","getContext","image","Image","drawText","string","fontSize","color","xOffset","yOffset","yStart","xStart","font","toString","fillStyle","fillText","src","setAttribute","onload","drawImage","width","height","fillRect","firstLineStart","convertCardToVC","keyPair","didDoc","suite","id","key","cardAsDataUri","toDataURL","credential","type","issuer","issuanceDate","Date","toISOString","credentialSubject","greetingCard","message","from","to","issue","signedVC","JSON","stringify","this","generate","setState","setTimeout","Fragment","className","value","onChange","event","target","onClick","style","margin","ref","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7176c31f.chunk.js","sourcesContent":["const jsonld = require(\"jsonld\");\n// const resolver = require(\"./resolver\");\n\nconst _nodejs =\n  // tslint:disable-next-line\n  typeof process !== \"undefined\" && process.versions && process.versions.node;\nconst _browser =\n  // tslint:disable-next-line\n  // eslint-disable-next-line\n  !_nodejs && (typeof window !== \"undefined\" || typeof self !== \"undefined\");\n\nconst documentLoader = _browser\n  ? jsonld.documentLoaders.xhr()\n  : jsonld.documentLoaders.node();\n\nconst wrappedDocumentLoader = args => {\n  return async url => {\n    console.log(\"wrappedDocumentLoader...\", url);\n    return documentLoader(url);\n  };\n};\n\nmodule.exports = wrappedDocumentLoader;\n","import React from \"react\";\n\nconst queryString = require(\"query-string\");\nconst { Ed25519KeyPair } = require(\"crypto-ld\");\nconst jsigs = require(\"jsonld-signatures\");\nconst vc = require(\"vc-js\");\nconst { Ed25519Signature2018 } = jsigs.suites;\nconst { keyToDidDoc } = require(\"did-method-key\").driver();\n\nconst wrappedDocumentLoader = require(\"./wrappedDocumentLoader\");\n\nconst defaultImage = \"https://source.unsplash.com/collection/433313/1280x1024\";\n\nconst parsed = queryString.parse(window.location.search);\n\nclass App extends React.Component {\n  state = {\n    issuerVerificationMethod: parsed.issuerVerificationMethod || \"\",\n    toDID: \"did:example:123\",\n    publicKeyBase58: parsed.publicKeyBase58 || \"\",\n    privateKeyBase58: parsed.privateKeyBase58 || \"\",\n    msg: parsed.msg || \"\",\n    backgroundImage: defaultImage\n  };\n\n  async componentDidMount() {\n    if (this.state.privateKeyBase58 === \"\") {\n      const keyPair = await Ed25519KeyPair.generate();\n      const didDoc = keyToDidDoc(keyPair);\n      this.setState({\n        issuerVerificationMethod: didDoc.id,\n        publicKeyBase58: keyPair.publicKeyBase58,\n        privateKeyBase58: keyPair.privateKeyBase58\n      });\n    }\n    if (this.state.msg === \"\") {\n      this.setState({\n        msg: \"Happy Holidays!\"\n      });\n    }\n\n    setTimeout(() => {\n      this.makeCard();\n    }, 500);\n  }\n\n  makeCard = () => {\n    const canvas = this.canvasA;\n    const context = this.canvasA.getContext(\"2d\");\n    const msg = this.state.msg;\n\n    const image = new Image();\n    image.src = this.state.backgroundImage;\n    image.setAttribute(\"crossorigin\", \"anonymous\");\n\n    function drawText(string, fontSize, color, xOffset, yOffset) {\n      const yStart = yOffset || 0 + 10;\n      const xStart = xOffset || 0 + 10;\n      context.font = fontSize.toString() + \"px monospace\";\n      context.fillStyle = color;\n      context.fillText(string, xStart, yStart);\n    }\n\n    image.onload = () => {\n      context.drawImage(image, 0, 0, this.canvasA.width, this.canvasA.height);\n      context.fillStyle = \"RGBA(255, 255, 255, 0.8)\";\n      context.fillRect(0, 0, canvas.width, canvas.height / 4);\n      const firstLineStart = 40;\n      drawText(\"Message: \" + msg, 20, \"red\", 0, firstLineStart);\n      drawText(\n        \"From: \" + this.state.issuerVerificationMethod,\n        20,\n        \"red\",\n        0,\n        firstLineStart + 32\n      );\n      drawText(\n        \"To: \" + this.state.toDID,\n        20,\n        \"red\",\n        0,\n        firstLineStart + 32 * 2\n      );\n    };\n  };\n\n  convertCardToVC = async () => {\n    const keyPair = new Ed25519KeyPair(this.state);\n    const didDoc = keyToDidDoc(keyPair);\n    const suite = new Ed25519Signature2018({\n      issuerVerificationMethod: keyPair.id,\n      key: keyPair\n    });\n\n    const cardAsDataUri = this.canvasA.toDataURL(\"image/png\");\n\n    const credential = {\n      \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://transmute-industries.github.io/vc-greeting-card/context/vc-greeting-card-v0.0.jsonld\"\n      ],\n      id: \"https://example.com/credentials/1872\",\n      type: [\"VerifiableCredential\", \"GreetingCard\"],\n      issuer: didDoc.id,\n      issuanceDate: new Date().toISOString(),\n      credentialSubject: {\n        id: this.state.toDID\n      },\n      greetingCard: {\n        image: cardAsDataUri,\n        message: this.state.message,\n        from: this.state.issuerVerificationMethod,\n        to: this.state.toDID\n      }\n    };\n\n    const signedVC = await vc.issue({\n      credential,\n      suite,\n      documentLoader: wrappedDocumentLoader({\n        /// injectable document loader...\n      })\n    });\n    console.log(JSON.stringify(signedVC, null, 2));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className={\"vc-greeting-card-options\"}>\n          <h3>From Verification Method:</h3>\n          <input\n            value={this.state.issuerVerificationMethod}\n            onChange={event => {\n              this.setState({\n                issuerVerificationMethod: event.target.value\n              });\n            }}\n          />\n          <br />\n\n          <h3>From Private Key:</h3>\n          <input\n            value={this.state.privateKeyBase58}\n            onChange={event => {\n              this.setState({\n                privateKeyBase58: event.target.value\n              });\n            }}\n          />\n          {/* <h3>From Public Key:</h3>\n          <input\n            value={this.state.publicKeyBase58}\n            onChange={event => {\n              this.setState({\n                publicKeyBase58: event.target.value\n              });\n            }}\n          /> */}\n\n          <h3>To DID:</h3>\n          <input\n            value={this.state.toDID}\n            onChange={event => {\n              this.setState({\n                toDID: event.target.value\n              });\n            }}\n          />\n          <br />\n\n          <h3>Message:</h3>\n          <input\n            value={this.state.msg}\n            onChange={event => {\n              this.setState({\n                msg: event.target.value\n              });\n              setTimeout(() => {\n                this.makeCard();\n              }, 500);\n            }}\n          />\n          <br />\n          <h3>Background: </h3>\n          <input\n            value={this.state.backgroundImage}\n            onChange={event => {\n              this.setState({\n                backgroundImage: event.target.value\n              });\n              setTimeout(() => {\n                this.makeCard();\n              }, 500);\n            }}\n          />\n          <br />\n          <h3>\n            <button onClick={this.convertCardToVC}>Get VC Greeting Card</button>\n          </h3>\n        </div>\n\n        <canvas\n          style={{ margin: \"0 auto\" }}\n          width=\"800\"\n          height=\"600\"\n          ref={canvasA => (this.canvasA = canvasA)}\n        />\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}